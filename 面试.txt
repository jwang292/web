HTML
1.	DOCTYPE 作用
HTML   The HyperText Markup Language, DOCTYPE= document Type. 
Main role : let the browser know using which HTML or XHTML regulation to render the web
The DOCTYPE should put into the <HTML>  like <!DOCTYPE html>
2.	HTML, XML. XHTML 
All are Markup Language.
XML  eXtensible Markup Language. 
Can create our own tag; ONLY one <ROOT> tag. 
Uppercase and lowercase is different 
Double quotes
	XHTML is between HTML4 AND HTML5. It is created by W3C
3.	前缀Prefix  ： data- 
属于DOM thinking .
We save data into a HTML TAG by prefix with data- dashes 
<button data-di=’hi’>
In eventListener we can use dataset.id to get the id value (hi)
4.	HTML 语义化的理解 semantic
Semantic HTML code communicates the meaning of its elements to both computers and humans, which helps web browsers, search engines, assistive technologies, and human developers understand the components of a web page. The key to well-written semantic HTML is the use of semantic tags.
a.	Good for SEO
b.	Easy for reading 
5.	HTML5 VS HTML4
Only one DOCTYPE <!DOCTYPE html>
Add more tag elements: 
语义化semantic
section main nav footer header aside ...
功能性 function 
video
Before using Flash, now using Video. There is API named video.js, which can help us to  do the video 
Canvas -drawing a img 
Input adds more type:  date, email, url
Add API: websocket after 2018. Local storage 
We can add async for script to increase the optimize page loading
Public props : contenteditable, draggable, hidden 
Contenteditable can let content be editing 
<div contenteditable>
<p>张三</p>
<div>
Draggable 可拖拽  draggable=’true’.  also we can use JS API 
6.	Meta 有哪些常用用法
For SEO
<Meta name=’keywords’ content=’xx,xx,xx’>
For viewport 
Setting screen size zoom and percentage
<meta name=’viewport’ content=’width=device-width,initial-scale,maximum-scale=1’>
For http response header : content-type
<Meta charset=’utf-8’>
7.	Img tag’s srcset 作用
响应式图片Responsive Images
Due to the customer using different screen size. 
If only focus on DPR device pixel ratio :
High ratio means show cleaner 
<img srcset=’320.png 1X, 640.png 2X, 960.png 3X’>
If using ‘w’ width ,we need set ‘sizes’
<img srcset=’320.png 320w’  sizes=’ (max-width:320px)100vw ,(max-width:360px)320px’ src=’…’>   sizes not support ‘100%’ only 100vw
For testing, must test the small size img at first. However, if test the full size, the img is being loaded. So we do not need to test the small one.
8.	Responsive Images  :   Picture TAG
Srcset is not good for reading
<Picture>
<source srcset=’640.png’  mrdia=’(min-width:640px)’>
<source srcset=480.png’  mrdia=’(min-width:480px)’>
<img src=’320.png’ alt=’’>
</Picture>
9.	Script 标签上使用defer 和async的区别
Script put before DOM is different with put end of DOM; blocking page load
提升网页加载性能,减少页面加载时间
a.	没有defer async， 浏览器会立刻加载执行脚本。
不等待后续加载的文档元素，读到就开始加载执行，会引起后续文档的加载
b.	Async, 后续文档的加载金额渲染与js脚本的加载和执行并行，也就是async 执行
c.	Defer,加载后续文档的过程和JS脚本的加载是并行（async），此时js Only 加载不执行， jd执行需要等待文档所有元素都解析完成后以及dom contentLoaded 的事件触发执行之前。
共同点：异步执行，不会block loading. Same time loading with the page 
不同点：after script loading, async run immediately, defer need to waiting other defer script(等前面的defer脚本先执行，保证顺序) and DOM loading.  
 
10.	前端实现web存储方式
a.	LocalStorage  5mb sync（用户不删除，一直都在）
b.	sessionStorage 5mb (关闭浏览器，就会销毁，用于会话)
c.	cookie 4kb （太小，用插件API---js-cookie, 可以设置销毁时间，永久存储）
d.	web SQL (废弃)
e.	indexdDB  适合存储大量数据 大于250mb 无上限;  async 

CSS基础
1.	css 的优先级
!important > 行类样式 inline style > ID选择器 Selector > 类选择器 class Selector >  标签选择器 TAG Selector > 通配符*wildcard > 继承inherit	
*{margin:0px; padding:0px;} 这里是设置所有元素的外边距margin和内边距padding都为0。
后面的css 权重要高于上面的权重Weights
2.	css 哪些方式可以实现隐藏页面
a.	opacity: 0; 透明的为0.盒子还在，占位置
b.	visibility: hidden   盒子占位置Box takes place
c.	display: none    盒子不占位置Box does not take place
d.	overflow: hidden 溢出隐藏overflow hide
e.	z-index: -9999 降低层级，上面又盒子就会覆盖 Lower the level, and the box above will cover it. Box is still at there.
f.	transform:scale(0,0)  x,y 都缩放为0；用于动画效果 从小放大。Take place
g.	left:-9999px  把盒子转移到屏幕以外，盒子存在。意义在不影响页面的情况下，提升SEO 
<h1>Apple</h1>    
h1{ left:-9999px }
3.	px,em,rem区别 重点在rem适配
px是绝对单位 absolute unit
em:相对单位，Relative unit 相对与父盒子的font-size  2em意思是字体是父盒子的2倍
rem：相对单位:相对与html 和ROOT标签 2rem 是相对与root标签的 2倍

REM 适配原理： 
a.	使用rem做单位(webpack ，写px自动转rem)
b.	动态设置不同屏幕下的html font-size
Dynamically set fonts under different screens
用Flexible.js 
4.	Element 水平居中horizontally centered方式
a.	子盒子Margin: 0 auto
b.	父盒子：Text-align:center 子盒子转行内块： display:inline-block
c.	子绝父相； 子盒子： left:50%, top:50%, transform:translate(-50%,-50%)
d.	父盒子：display:flex, justify-content:center(水平)  align-items:center(垂直)
5.	Css 里的定位方式Position :
a.	Static 默认（default） top right buttom left z-index无效，上到下，左到右
b.	Fixed 固定   相对整个浏览器的位置position relative to the entire browser
c.	Absolute 绝对   相对与有定位的父辈元素Relative and positioned parent elements
d.	Relative 
e.	Sticky 粘性定位 relative+fixed，父元素在视口区域，并进入top值给定的范围，当前元素就是fixed定位，否则就是relative定位
实现吸顶效果ceiling effect
Position:sticky; top:0(滚动后，距离屏幕top为0时开始吸顶);
6.	Z-index 
3D 坐标里的z方向
默认0，可以通过z-index设置postion的图层位置
 

注意： 
a.	如果父元素有定位并且设置了z-index，优先按照父元素的定位的z-index进行比较层级
b.	如果只有static 定位而没有任何别的定位，z-index是不生效的
7.	清除浮动Clear Float
清除浮动照成的影响，浮动脱离标准流，不占位置（父盒子不会被撑开）
Floating is out of the standard flow and does not occupy a place (the parent box will not be stretched)
a.	定高法
子盒子不设置float前，原先子盒子有高度，父盒子没有设置高度，父盒子依然会按子盒子的高度显示。但如何子盒子设置了float， 哪么父盒子会失去高度。
解决：给所有盒子设置高度。
问题：写死了 cannot change 
b.	为父盒子添加一个子盒子，clear: both;
c.	为父盒子设置overflow: hidden ; 溢出隐藏，触发bfc，解决浮动影响
缺点：如果设置鼠标mosue blur 显示下拉框，有可能被隐藏
d.	伪元素 .clearfix:{clear:both}
主流用flex布局，稳定，要考虑兼容compatible
8.	BFC的理解
块级格式化上下文(Block Formatting Context)
独立渲染区域，Independent render area 将BFC里的内容和外面的隔离
BFC会触发方式：
a.	Position： absolute/ fixed
b.	Float: left / right ; 浮动元素多个放在一起，会相会隔开，2个box都设置float的同时，不会叠加，而是按个显示
c.	Overflow:非visible, hidden/ auto/scroll
d.	Display:inline-block
BFC应用：
a.	处理块级元素，上下margin合并； 2盒子上面的设置margin-bottom, 下面的设置margin-top ； 由于BFC被触动，导致上下设置的值会合并而不是叠加
b.	处理margin 塌陷
c.	清除浮动
d.	实现自适应布局
左边固定，右边自适应
Flex=> display:flex;  左边定宽，右边flex:1
Float => 2边浮动，中间自适应
左浮动float:left 右浮动 float:right; 浮动不占位置的；中间盒子设置overflow:hidden
Position=> 先定位，再设置padding
9.	CSS Sprites 以及好处
精灵图 图片合并技术；如果正常想引入8张图片就需要向服务器发送8次请求，有了sprites 技术，一次请求拿8张图
a.	容器设置 display:inline-block （才能设置宽高）, width and height 设置为每张sprites 的宽高
b.	给所有的sprite图片设置 background ： url（‘…./ss.png’）0px 0px
 
c.	设置背景定位 调节高度的数值
缺点：
a.	改一个图就要改所有的图片
b.	http2逐渐普及，有了多路复用 multiplexing解决多个小图片所造成的HTTP请求消耗；sprites存在价值下降
c.	图片放大会失真distortion
主流处理图片方案： iconfont, svg矢量图
10.	媒体查询的理解media inquiries； 根据屏幕尺寸，显示不同效果
考察点：响应式适配 Responsive adaptation
Media inquires 开始与CSS3，用于Responsive adaptation
组成部分：
a.	一个可选的媒体类型： screen, print
b.	零或多个媒体功能限定表达式： max-width:500px; orientation:landscape
c.	 
这2部分最后都会解析为true / false ；然后整个查询为true后，和查询关联的样式会生效，否则会不生效
 
11.	盒子模型的理解  CSS basic box model
内容content
内边距 padding
边框 border
外边距 margin

 
12.	标准盒子模型和怪异盒子模型
Content box 标准盒子
 
Border-box 怪异盒子
 
设置的padding border会自动调试成符合width height的大小，不需要自己计算
13.	伪类和伪元素的区别
Pseudo-class : 用来选中元素； 权重和class 一样高 ； ：为前缀
:hover
:nth-child(1)
:checked
:first-child
:disabled
Pseudo-element  用来创建元素；该元素在DOM TREE 中不存在
:before/ :after
能看到，但是无法注册事件，无法通过JS控制
14.	Flex的理解
语法：display: flex; 为父盒子设置
	Flex-direction: 调整主轴方向
 
	 
Align-items 控制单行 
 
在了解 flex：1 之前我们先了解一下flex的属性值有哪些，就如同background一样，有着backgournd-images、background-color、background-position等属性名一样， flex也有着3个类似的属性，（属性都是给子级添加的，父级必须设置display：flex)。
	Flex-grow: 1 多余的空间分给1
	Flex-shrink:1 超出部分被平均分配给了四个盒子，盒子进行了挤压
 	flex-basis: auto
	flex-grow：0；
flex-shrink：1；
flex-basis：auto
也可以合成一个：flex： 0 1 auto；
然而，这并不是flex：1的完整写法，上面这个只是flex的默认值，表示子级总宽度小于父级盒子宽度时，对多余空间不处理，子级总宽度大于父级盒子宽度时，对子级进行挤压
flex：1的完整写法应该为： flex： 1 1 0%
flex：1 应该是子级元素占满整个多余部分而不进行挤压，当然，一般弹性盒中只能设置一个子级元素 flex：1；



JS基础
1.	Hoisting 变量声明提升
 
2.	JS参数是以什么方式传递的
 
 
3.	垃圾回收机制
 
 
   
 
4.	Js作用域链的理解

Function fn(){
Let age =18
Let obj={}
}
Fn()  调用完age 就会触发垃圾回收机制
Fn() 2次创建的obj内存地址是不一样的 所以不相等
在整个fn()执行完毕后，所有的local variable 会清理

一层一层往外找变量的过程就是作用域链，是一种引用关系，例子如下
 
 


 



 
 
JS调用栈call stack后进先出
为什么全局函数访问不到local variable ? 因为后进先出，local variable被调用后被释放了，所以访问不到。内部的可以通过作用域链访问外部，但外部无法访问内部，因为被销毁了。 
5.	闭包的理解 Closures
内部函数，访问外部函数的变量，会形成闭包
内部return 出去，外部接受；导致原本应该被释放的变量，被保存了下来
 
 
JS call stack的原理， 一旦fn（）调用完成，则内部count变量会被释放掉
为了防止如此
我们需要return inner 则count 值就被缓存了
再在外面用个variable 接受，完成闭包，实现数据私有
 
调用result 就=调用fn
就算修改count值 也不会影响function本身数值
 
 
如何解决闭包带来的内存泄漏memory leak
 
		补充
  打印值为 6 6 6 6 6
因为是async 所以执行是 I已经结束循环后+1.  Var I 是全部变量
解决方法
 
 
（）（）函数自调用
现在
 
用let 就会解决 因为let I 是局部变量
 
p.name 访问不到是因为 name 是局部变量；若内部改成this.name=x 外部就可以访问了	
6.	JS中数据类型隐式转换data type implicit conversion
 
 
    ==发现类型不一，会进行类型转换，就会触发data type implicit conversion
7.	原型链Prototype chain
function Person(name, age) {   this.name = name   
this.age = age  
 this.sayHi = () => {     console.log('hi')   } }  //通用的方法添加给每个实例，可以，但浪费内存；其实所有实例可以公用一个sayHi 方法
let p1 = new Person('zs', 12)
 let p2 = new Person('ls', 19)
 console.log(p1.sayHi === p2.sayHi)      False，  每创建一个对象就会开辟一个新的空间
用原型prototype
function Person(name, age) {  
 this.name = name   
this.age = age  
}  
//添加到prototype上的所有的实例都可以访问到
Person.prototype.sayHi=()=>{{     console.log('hi') }
let p1 = new Person('zs', 12)
 let p2 = new Person('ls', 19)
 console.log(p1.sayHi === p2.sayHi)  true 

原型三角关系
构造函数  实例  原型
Constructor ---new- instance--- __proto__--> prototype
                     --------------prototype-----------------
		-----------constructor-----------------
Instance 访问属性或方法是，优先访问自己的，自己没找到，往原型上找，如果还是没找到，会继续找原型的原型，直到找到顶端—Object.prototype,如果还没有就会return error

 
hasOwnProperty(‘xx’)  用来判断属性‘xx’是不是自己的，还是原型链上的
 


 
8.	继承Inheritance
继承属性和方法，便于管理和复用multiplex
 继承： 将多个构造函数，建立关联，实现方便管理和方便复用
目标：原型继承=继承方法
原型继承： 通过改造原型链实现继承，利用原型链的特征实现继承
 
一个对象.prototype = new 别的对象（） 会继承别的对象上的属性/方法

一个对象.prototype = 别的对象.prototype 不可以，因为会公用一个原型，有些不属于别的对象的属性也会别附带给别的对象
 
组合继承composition inheritance
Prototype inheritance  +  constructor(call)的方式实现
a.	Prototype chain :改造原型链的技术，实现继承方法
Student.prototype =new Person()
b.	实例属性的构造过程没有得到复用，可以通过构造函数的方式，实现复用 
调用函数；改变函数执行时this的指向，默认是window
Person.call(this,name,age)      // this 是指实例stu; 后面是传参数
 
	      寄生式组合继承Parasitic Compositional Inheritance
 
 	Student.prototype =Object.create(Person.prototype)
	 
ES6 inheritance    ES6 2015年发布的js标准ECMAScript 6
Class Person{  
//类似与之前的构造函数
Constructor(name,age){
This.name=name
This.age =age
}
//直接添加到了原型上 prototype
sayHi(){console.log(‘hi’)}
jump(){console.log(‘jump’)}
}
Class Teacher extends Person{//如果没有提供构造函数，在继承时，会默认自动借调父构造函数
Constructor(name,age,lesson){ 
//触发父构造函数，进行实例的属性初始化
Super(name,age)
This.lesson=lesson
}
Teach(){
console.log(‘teach’)
}
} 
9.	判断是否是数组
a.	Object.prototype.toString.call(要测试的变量)	如果是array 返回 [Object Array]       
普通的 xx.toString() 只会转成string 和prototype上的toString不一样
b.	Array.isArray(要测试的变量)
10.	This 的理解
This指向问题：
a.	函数调用模式 fn（）指向window   (默认绑定) default binding
b.	方法调用模式 obj.fn() 指向调用者（隐式绑定）implicit binding
c.	上下文调用模式 call, apply, bind 想指向谁就指向谁(显示绑定) show binding
Fn.call(this指向的内容，参数1,参数2…..  argments 挨个传
Fn.apply (this指向的内容，[参数1,参数2….])  argument是一个array
d.	构造函数模式 	new Person() this指向创建的实例
New 4步
1)	创建对象
2)	构造函数this指向新对象
3)	执行构造函数
4)	返回实例
11.	（）=>{} 箭头函数中的this
 
12.	Promise 静态方法
Promise 的三个状态： pending 默认状态，等待中；fulfilled(成功)； rejected(失败)
a.	Resolve 函数被执行时，会将promise的状态从pending 改成fulfilled成功
b.	Reject函数被执行时，会将promise的状态从pending 改成rejected失败

Promise.reject()      简写
New promise((resolve,reject)=>{
reject()
})

Promise.resolve() 
New promise((resolve,reject)=>{
resolve ()
})

Promise.all()  处理工作中并发Concurrency多个请求
 
High concurrency 高并发是back-end issue 
13.	宏任务，微任务Macro tasks, micro tasks
Console.log(1)
setTimeout(function(){
Console.log(2)
},0)
setTimeout(function(){
Console.log(4)
},0)
Console.log(3)

1324  JS是单线程，如果遇到async的内容，会交给browser处理（等待，监听）；所以遇到异步会跳过处理后面的
Event LOOP
 

主线程要执行的代码=》宏任务
定时器/延时器=》宏任务
注意：只有上一个宏任务执行完成，才会考虑执行下一个宏任务
Console.log(1)宏任务1
Console.log(1) 宏任务1
Console.log(1) 宏任务1
setTimeout(function(){
Console.log(2) 宏任务2
Console.log(2) 宏任务2
},0)
setTimeout(function(){
Console.log(4) 宏任务3
Console.log(4) 宏任务3
Console.log(4) 宏任务3
},0)
Console.log(3) 宏任务1
      
微任务：在上个宏任务做完 和下个宏任务开始前。 Promise.then  和promise.catch

 
	Async 可以用于修饰一个函数，表示一个函数是异步
	Async 只有遇到await开始往下，才是异步的开始；注意！await后面还是同步只有下面的才是异步Const res =await 1   1是同步，const res = 才开始是异步
	Async function fn(){
 	   Console.log(111)}
	Fn()
	Console.log(222)
	结果 111  222   只有async 没有await 等于没写async
	Async function fn(){
	// await 后面的内容可以理解为  promise.then的内容
	Const res =await 1
 	   Console.log(res)}
	Fn()
	Console.log(222)
 结果 222 1
	Async function fn(){
	   Console.log（333）
	Const res =await 1
 	   Console.log(res)}
	Fn()
	Console.log(222)
	结果 333 222 1
	 
 
14.	Async await
 
15.	相较与promise,async/await优势
 p.then 成功 p.catch失败			
	16. 深拷贝
	  当然递归也能解决，只是麻烦

. 深拷贝
	  当然递归也能解决，只是麻烦
HTTP 协议
1.	HTTP有哪些方法
 
2.	各个HTTP方法的作用
 
 
Axios-Parment  Axios - Data 
3.	Get Post 方法的区别
 
默认的HTTP请求内容的传输时明文的 （所以要用）
4.	HTTP请求报文时什么样的
 
 
 
5.	HTTP 响应报文
  
6.	HTTP 状态码
 
 
协商缓存：网页资源过期，发请求问服务器是否有更新，检查资源也能用返回304。用本地缓存就行。
  



7.	HTTP 的 KEEP-ALIVE作用
HTTP永远是单项通信；客户端向服务器
WebSocket 是双向通信，服务器可以向客户端推送消息
 
 
8.	为什么需要HTTPS
 







9.	HTTPS 如何确保安全
 
对称加密算法：相同密钥加密解密，可逆的，可以用与加密传输数据
	使用该算法，一定要保证密钥不被泄露
非对称算法：使用公钥和私钥 2把密钥
a.	对称加密
过程必须是可逆的
  
最不安全的地方在于，最开始互相约定密钥的时候
b.	非对称加密
 
  
c.	HTTPS加密解决方案
 
新的TLS 老的SSL
 
d.	数字证书
 
 
 
 
10.	HTTP2和HTTP1区别，优势，特点
HTTP2 的升级对于用户来说，是跨时代的。因为基于HTTP2的访问速度会非常快。
 
 

 
 
 
11.	Http缓存控制cache
 
数据库缓存：数据存入缓存，除非数据库发生变化，否则直接返回数据
服务器缓存：对相同请求，直接返回缓存内容。除非数据变化。
浏览器缓存（前端）：HTTP缓存;优化页面加载效率，如果没有缓存策略，每次重新加载页面，会非常慢。
 
 

 
BUG：客户端改时间，就会发生缓存混乱
 
注意：如果命中强缓存，在有效期内，使用本地浏览器的缓存，请求该资源是不会向服务器发送请求的（大大减轻了服务器压力）

 
 
 
 
 
 
 
 
 

TCP协议
1.	TCP/IP协议
 
2.	一次完整的HTTP服务过程
 
3.	DNS = Domain Name System解析 ; 将域名解析成IP地址
 
 
 
4.	TCP3次握手
 
 
5.	关闭TCP连接的四次挥手
 
 

DOM
1.	事件流是什么
 
 
 
2.	什么是事件委托
 
同时给很多li元素添加点击事件很繁琐，我们可以直接给li的父元素也就是ul添加点击事件。 Event.target   指的是触发事件的事件源。 因为给父元素绑定的event，所以this指代就是父元素ul，我们需要用event.target去获得实际触发事件的事件源。
.tarName.toLowerCase() 可以获得dom tag的名称
 
事件委托 = 事件冒泡。 

浏览器底层原理
1.	浏览器是如何解析css选择器
 
 
浏览器解析选择器，是又右向左解析的！！！
  左向右，右向左；结果一样，不同的是性能
 
 
一个找爹 一个是找孩子；明显找爹要比找孩子容易





2.	浏览器是如何进行界面渲染的
 
3.	重绘(repaint)和重排（回流reflow）是什么
 
4.	何时触发reflow
 
5.	浏览器对repaint, reflow的优化
 
 
 

 
浏览器做了优化，所有repaint reflow的操作，进行了批量处理；所以会直接显示400*400的盒子；
如果加一句console.log(div.offsetWidth)   //为了保证计算值的获取准确性，会提前刷新浏览器队列
所以在获取完style 再设置style 获取的是更新前的，设置完再获取，获取的是更新后的。


 
用宏任务 微任务也可以实现提前flush

6.	重绘重排角度，我们应该如何优化页面渲染性能
 
 
7.	前端如何实现即时通讯？ Websocket
核心问题：
a.	及时通信有哪些方案
b.	为什么使用websocket
 
 
SetInterval
 
 
SSE 
 
 

 






8.	浏览器的同源策略
 
9.	跨域获取数据
 
Webpack 开发时期的， Nginx是上线后
 
 
代理服务器
 
 
前端工程化
1．	Babel的原理
 
Let a =1+1 => var a =2
AST 语法树 可以通过AST Explorer 工具来查看Babel具体生成的AST 节点
2．	如何编写Babel插件
 
 


3.	Git 工作流；怎么用git
 
 
  

 
 
4.	Git 的rebase 和merge的区别
 
 
 
5.	Git 的reset 回退，revert撤销
 
提交了20个版本，只有其中一个版本不需要，选revert-n 版本号； git add. Git commit -m’确认revert’  
后悔了还可以 用reset --hard 加版本号 撤销revert
提交20个版本发现 第10个版本后的都没用，用reset回退到版本10
Git push -f 覆盖更新

